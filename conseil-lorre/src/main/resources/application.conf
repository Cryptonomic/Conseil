lorre {
  sleepInterval: 5 s
  bootupRetryInterval: 10 s
  bootupConnectionCheckTimeout: 10 s
  #Used to make sure Lorre records average fees every n iterations
  feeUpdateInterval: 20
  #Used to select how many fees should be averaged together
  numberOfFeesAveraged: 1000
  #Docs missing
  depth: newest
  #Docs missing
  headHash: None

  #Used for configuring time-out for reading a web response content
  #Timeout on sync network calls
  requestAwaitTime: 120 s
  #Timeouts to read the response into a strict string
  GETResponseEntityTimeout: 90 s
  POSTResponseEntityTimeout: 1 s

  # defines custom updates to be run at specific points in time (i.e. upon reaching a given level)
  # take care to guarantee that the event type corresponds to some definition of
  # tech.cryptonomic.conseil.config.ChainEventType
  chainEvents: [
    {
      type: accountsRefresh,
      levels: {}
    }
  ]

  # Replace database name, user and password in an env-specific config file.
  db {
    dataSourceClass: "org.postgresql.ds.PGSimpleDataSource"
    properties {
      databaseName: "conseil"
      user: "foo"
      password: "bar"
      reWriteBatchedInserts: true
    }
    # The following numbers are based on literature from here: https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
    # We might want to fine-tune these on the actual infrastructure, doing testing with different values
    # Please keep both values aligned in your configuration to avoid this issue: https://github.com/dnvriend/akka-persistence-jdbc/issues/177
    numThreads: 10
    maxConnections: 10
  }

  //TODO Should we wrap configuration from below into 'Tezos' secion? The same in the *Configuration class?

  batchedFetches {
    # The following configs defines how many concurrent requests we'd like to run
    #   against a tezos node to speed up fetching of data
    # This values should take into account the overall load that will be generated by
    #   all fetching operations that could be generated by different Conseil
    #   instances (if more than one) and the number of requests sent by each
    #   said operations, and be compared to the load handling capabilities
    #   of the Tezos node itself

    #Used when getting accounts from tezos
    accountConcurrencyLevel: 5

    #Used when getting operation data for each new block just fetched
    blockOperationsConcurrencyLevel: 10

    #Used to paginate blocks read from tezos before each db storage
    blockPageSize: 500

    #Used to specify the max-time allowed for each block-page to finish processing
    #Currently takes into account the time to process all corresponding accounts for each page
    blockPageProcessingTimeout: 1 hour

    #Used to specify the max-time allowed for each accounts-page to finish processing
    accountPageProcessingTimeout: 15 minutes

    #Used to specify the max-time allowed for each delegate-page to finish processing
    delegatePageProcessingTimeout: 15 minutes

  }

  # Configuration for fetching upcoming baking and endorsing rights
  blockRightsFetching {
    initDelay: 2 minutes # time before starting fetching rights
    interval: 60 minutes # interval between fetches
    cyclesToFetch: 5 # how many cycles we want to fetch
    cycleSize: 4096 # size of the cycle, by default 4096
    fetchSize: 200 # amount of rights we fetch at once
    updateSize: 16 # amount of rights we update after Lorre syncs
  }

}