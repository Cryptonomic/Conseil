include "logging.conf"

lorre {
  sleep-interval: 5 s
  bootup-retry-interval: 10 s
  bootup-connection-check-timeout: 10 s
  #Used to make sure Lorre records average fees every n iterations
  fee-update-interval: 20
  #Used to select how many fees should be averaged together, based on a time-window
  fees-average-time-window: 1 day
  #Docs missing
  depth: newest
  depth: ${?CONSEIL_LORRE_DEPTH}
  #Docs missing
  head-hash: None
  head-hash: ${?CONSEIL_LORRE_HEAD_HASH}

  #Used for configuring time-out for reading a web response content
  #Timeout on sync network calls
  request-await-time: 120 s
  #Timeouts to read the response into a strict string
  get-response-entity-timeout: 90 s
  post-response-entity-timeout: 1 s

  # defines custom updates to be run at specific points in time (i.e. upon reaching a given level)
  # take care to guarantee that the event type corresponds to some definition of
  # tech.cryptonomic.conseil.config.ChainEventType
  chain-events: [
    {
      type: accountsRefresh,
      levels: {}
    }
  ]

  # feature flags: select if some functionality should be turned off
  enabled-features {
    block-rights-fetching-is-on: true
    block-rights-fetching-is-on: ${?CONSEIL_LORRE_BLOCK_RIGHTS_FETCHING_ENABLED}
    metadata-fetching-is-on: false
    metadata-fetching-is-on: ${?CONSEIL_LORRE_BLOCK_RIGHTS_FETCHING_ENABLED}
    fork-handling-is-on: false
    fork-handling-is-on: ${?CONSEIL_LORRE_FORK_DETECTION_ENABLED}
  }

  # Replace database name, user and password in an env-specific config file.
  db {
    dataSourceClass: "org.postgresql.ds.PGSimpleDataSource"

    properties {
      user: "foo"
      user: ${?CONSEIL_LORRE_DB_USER}

      password: "bar"
      password: ${?CONSEIL_LORRE_DB_PASSWORD}

      url: "jdbc:postgresql://localhost:5432/postgres"
      url: ${?CONSEIL_LORRE_DB_URL}

      reWriteBatchedInserts: true
    }
    # The following numbers are based on literature from here: https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
    # We might want to fine-tune these on the actual infrastructure, doing testing with different values
    # Please keep both values aligned in your configuration to avoid this issue: https://github.com/dnvriend/akka-persistence-jdbc/issues/177
    numThreads: 10
    maxConnections: 10
  }

  # TODO Should we wrap configuration from below into 'Tezos' secion? The same in the *Configuration class?

  batched-fetches {
    # The following configs defines how many concurrent requests we'd like to run
    #   against a tezos node to speed up fetching of data
    # This values should take into account the overall load that will be generated by
    #   all fetching operations that could be generated by different Conseil
    #   instances (if more than one) and the number of requests sent by each
    #   said operations, and be compared to the load handling capabilities
    #   of the Tezos node itself

    #Used when getting accounts from tezos
    account-concurrency-level: 5

    #Used when getting operation data for each new block just fetched
    block-operations-concurrency-level: 10

    #Used to paginate blocks read from tezos before each db storage
    block-page-size: 500

    #Used to specify the max-time allowed for each block-page to finish processing
    #Currently takes into account the time to process all corresponding accounts for each page
    block-page-processing-timeout: 1 hour

    #Used to specify the max-time allowed for each accounts-page to finish processing
    account-page-processing-timeout: 15 minutes

    #Used to specify the max-time allowed for each delegate-page to finish processing
    delegate-page-processing-timeout: 15 minutes

  }

  # Configuration for fetching upcoming baking and endorsing rights
  block-rights-fetching {
    init-delay: 2 minutes # time before starting fetching rights
    interval: 60 minutes # interval between fetches
    cycles-to-fetch: 5 # how many cycles we want to fetch
    cycle-size: 4096 # size of the cycle, by default 4096
    fetch-size: 200 # amount of rights we fetch at once
    update-size: 16 # amount of rights we update after Lorre syncs
    update-size: ${?CONSEIL_LORRE_RIGHTS_UPDATE_SIZE}
  }

  metadata-fetching {
    init-delay: 15 seconds # time before starting fetching rights
    interval: 360 minutes # interval between fetches
  }

}