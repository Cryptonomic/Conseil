include "metadata.conf"

conseil: {
  hostname: "0.0.0.0"
  port: {{APIPORT}}
  cache-ttl: 15 minutes
  max-query-result-size: 100000
}

lorre: {
  sleepInterval: 5 s
  bootupRetryInterval: 10 s
  bootupConnectionCheckTimeout: 10 s
  #Used to make sure Lorre records average fees every n iterations
  feeUpdateInterval: 20
  #Used to select how many fees should be averaged together
  numberOfFeesAveraged: 1000
  depth: newest,
  headHash: None
}

conseildb = {
  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
  properties = {
    databaseName = "{{DBDB}}"
    user = "{{DBUSER}}"
    password = "{{DBPW}}"
    url = "jdbc:postgresql://{{DBHOST}}:{{DBPORT}}/{{DBDB}}"
  }
  numThreads = 64
  maxConnections = 64
}

logger.scala.slick = INFO


requestAwaitTime: 120 s
GETResponseEntityTimeout: 90 s
POSTResponseEntityTimeout: 1 s

batchedFetches {
  accountConcurrencyLevel = 5
  blockOperationsConcurrencyLevel = 10
  blockPageSize = 500
  blockPageProcessingTimeout = 15 minutes
  accountPageProcessingTimeout = 5
  delegatePageProcessingTimeout = 5 minutes
}

platforms: {
  tezos: {
    {{XTZNET}}: {
      node: {
        protocol: "{{XTZSCHEME}}"
        hostname: "{{XTZHOST}}",
        port: {{XTZPORT}}
        pathPrefix: "{{XTZPREFIX}}"
      }
    }
  }
}

# Security settings
security: {
  apiKeys: {
    # List of authorized API keys needed to query Conseil
    keys: []
  }
}

# Custom libSodium settings
sodium: {
  libraryPath: "/usr/lib/x86_64-linux-gnu/libsodium.so.18"
}

# Customization on the underlying actor system
akka {
  tezos-streaming-client {
    max-connections = 30
    # The 2048 limit is thus overestimated by a factor of roughly 10x, to allow room for
    # reuse of the same pool from different threads at the same time, up to that factor
    max-open-requests = 2048
    # essentially keep connections alive across lorre's cycles
    idle-timeout = 10 minutes
    pipelining-limit = 7
    # give more room for async response in head-of-line blocking on the same connection or other slow responses
    response-entity-subscription-timeout = 5 seconds
  }
  tezos-dispatcher {
    type = "Dispatcher"
    executor = "thread-pool-executor"
    throughput = 1

    thread-pool-executor {
      fixed-pool-size = 16
    }
  }

  http {
    server {
      request-timeout = 5 minutes
      idle-timeout = 5 minutes
    }
  }
}