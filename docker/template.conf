include required(classpath("application.conf"))

platforms: {
  {{XTZPLATFORM}}: {
    {{XTZNET}}: {
      node: {
        protocol: "{{XTZSCHEME}}"
        hostname: "{{XTZHOST}}",
        port: {{XTZPORT}}
        pathPrefix: "{{XTZPREFIX}}"
      }
    }
  }
}

conseil {
  hostname: "0.0.0.0"
  port: {{APIPORT}}
  cache-ttl: 15 minutes
  max-query-result-size: 100000

  db {
    dataSourceClass: "org.postgresql.ds.PGSimpleDataSource"
    properties {
      user: "{{DBUSER}}"
      password: "{{DBPW}}"
      url: "jdbc:postgresql://{{DBHOST}}:{{DBPORT}}/{{DBDB}}"
    }
    numThreads: 20
    maxConnections: 20
  }

  # Security settings
  security.apiKeys {
    # List of authorized API keys needed to query Conseil
    keys: ["{{APIKEY}}"]
  }
}

lorre {
  sleepInterval: 5 s
  bootupRetryInterval: 10 s
  bootupConnectionCheckTimeout: 10 s
  #Used to make sure Lorre records average fees every n iterations
  feeUpdateInterval: 20
  #Used to select how many fees should be averaged together
  numberOfFeesAveraged: 1000
  depth: newest,
  headHash: None

  requestAwaitTime: 120 s
  GETResponseEntityTimeout: 90 s
  POSTResponseEntityTimeout: 1 s

  db {
    dataSourceClass: "org.postgresql.ds.PGSimpleDataSource"
    properties {
      user: "{{DBUSER}}"
      password: "{{DBPW}}"
      url: "jdbc:postgresql://{{DBHOST}}:{{DBPORT}}/{{DBDB}}"
    }
    numThreads: 20
    maxConnections: 20
  }

  batchedFetches {
    accountConcurrencyLevel: 5
    blockOperationsConcurrencyLevel: 10
    blockPageSize: 500
    blockPageProcessingTimeout: 15 minutes
    accountPageProcessingTimeout: 5
    delegatePageProcessingTimeout: 5 minutes
  }
}

# Customization on the underlying actor system
akka {
  streaming-client {
    max-connections: 30
    # The 2048 limit is thus overestimated by a factor of roughly 10x, to allow room for
    # reuse of the same pool from different threads at the same time, up to that factor
    max-open-requests: 2048
    # essentially keep connections alive across lorre's cycles
    idle-timeout: 10 minutes
    pipelining-limit: 7
    # give more room for async response in head-of-line blocking on the same connection or other slow responses
    response-entity-subscription-timeout: 5 seconds
  }

  http {
    dispatcher {
      type: "Dispatcher"
      executor: "thread-pool-executor"
      throughput: 1

      thread-pool-executor {
        fixed-pool-size: 16
      }
    }
    server {
      request-timeout: 5 minutes
      idle-timeout: 5 minutes
    }
  }
}

# Custom libSodium settings
sodium.libraryPath: "/usr/lib/x86_64-linux-gnu/libsodium.so.18"