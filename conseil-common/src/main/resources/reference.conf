# Default global configuration file. Should be overriden for full functionality.

#Optional configuration for updating conseil api keys with the ones generated by nautilus-cloud
//nautilus-cloud {
//  host: "http://localhost"
//  port: 1234
//  path: "apiKeys/dev" // here should be an environment name after '/'
//  key: "exampleApiKeyDev"
//  delay: 10 seconds
//  interval: 30 seconds
//}

#Slick debug level
logger.scala.slick = ALL # Configure in logback.xml

# Settings for blockchains Conseil can connect to. Nested by blockchain name and network.
platforms {
  tezos {
    zeronet {
      node {
        protocol: "https"
        hostname: "nautilus.cryptonomic.tech",
        port: 8732
        pathPrefix: "tezos/zeronet/"
      }
    }
  }
}

# Define here a known tezos naming service contract for each network of interest
tns {
  # an example definition might look like
  #
  # mainnet {
  #   name: "TNS name"
  #   contractType: "TNS"
  #   accountId: "<KT1 address of the contract>"
  # }
}

# Customization on the underlying actor system
akka {

  # custom host pool for akka-http client connections used for streaming request/responses
  # tune the configuration based on load-handling capability of tezos nodes
  # refer to host-connection-pool section in
  # https://doc.akka.io/docs/akka-http/current/configuration.html
  # for available properties and their meaning
  #
  # The current configuration is based on local benchmarking against zeronet
  # To improve or check it, look at the tech.cryptonomic.conseil.NodeStreamingBenchmark app
  # On the streaming http client pool we expect a max of:
  #   45 connections x
  #    7 requests/conn ~=
  #  315 ongoing requests at each moment
  # The pipelining on each connection might slow down for slow responses, but they should be rare
  streaming-client {
    max-connections: 45
    # This limit is overestimated by a factor of roughly 10x, to allow room for
    # reuse of the same pool from different threads at the same time, up to that factor
    max-open-requests: 4096
    # essentially keep connections alive across lorre's cycles
    idle-timeout: 10 minutes
    pipelining-limit: 7
    # give more room for async response in head-of-line blocking on the same connection or other slow responses
    response-entity-subscription-timeout: 60 seconds
  }
}

# Custom libSodium settings
sodium.libraryPath: "/usr/lib/x86_64-linux-gnu/libsodium.so.18"