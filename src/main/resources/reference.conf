# Default global configuration file. Should be overriden for full functionality.

include "metadata.conf"

#Optional configuration for updating conseil api keys with the ones generated by nautilus-cloud
//nautilus-cloud {
//  host: "http://localhost"
//  port: 1234
//  path: "apiKeys/dev" // here should be an environment name after '/'
//  key: "exampleApiKeyDev"
//  delay: 10 seconds
//  interval: 30 seconds
//}

#Slick debug level
logger.scala.slick = INFO

# Settings for blockchains Conseil can connect to. Nested by blockchain name and network.
platforms {
  tezos {
    zeronet {
      node {
        protocol: "https"
        hostname: "nautilus.cryptonomic.tech",
        port: 8732
        pathPrefix: "tezos/zeronet/"
      }
    }
  }
}

# Runtime settings for Conseil server
conseil {
  hostname: "0.0.0.0"
  port: 1337
  cache-ttl: 15 minutes
  max-query-result-size: 100000
  high-cardinality-limit: 100
  startup-deadline: 5 minutes

  # Replace database name, user and password in an env-specific config file.
  db {
    dataSourceClass: "org.postgresql.ds.PGSimpleDataSource"
    properties {
      databaseName: "conseil"
      user: "foo"
      password: "bar"
      reWriteBatchedInserts: true
    }
    # The following numbers are based on literature from here: https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
    # We might want to fine-tune these on the actual infrastructure, doing testing with different values
    # Please keep both values aligned in your configuration to avoid this issue: https://github.com/dnvriend/akka-persistence-jdbc/issues/177
    numThreads: 10
    maxConnections: 10
  }

  # Security settings
  security.apiKeys {
    # List of authorized API keys needed to query Conseil
    keys: []
    allow-blank: false
  }

}

# Runtime settings for Lorre process
lorre {
  sleepInterval: 5 s
  bootupRetryInterval: 10 s
  bootupConnectionCheckTimeout: 10 s
  #Used to make sure Lorre records average fees every n iterations
  feeUpdateInterval: 20
  #Used to select how many fees should be averaged together
  numberOfFeesAveraged: 1000
  #Docs missing
  depth: newest
  #Docs missing
  headHash: None

  #Used for configuring time-out for reading a web response content
  #Timeout on sync network calls
  requestAwaitTime: 120 s
  #Timeouts to read the response into a strict string
  GETResponseEntityTimeout: 90 s
  POSTResponseEntityTimeout: 1 s

  # defines custom updates to be run at specific points in time (i.e. upon reaching a given level)
  # take care to guarantee that the event type corresponds to some definition of
  # tech.cryptonomic.conseil.config.ChainEventType
  chainEvents: [
    {
      type: accountsRefresh,
      levels: {}
    }
  ]

  # Replace database name, user and password in an env-specific config file.
  db {
    dataSourceClass: "org.postgresql.ds.PGSimpleDataSource"
    properties {
      databaseName: "conseil"
      user: "foo"
      password: "bar"
      reWriteBatchedInserts: true
    }
    # The following numbers are based on literature from here: https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
    # We might want to fine-tune these on the actual infrastructure, doing testing with different values
    # Please keep both values aligned in your configuration to avoid this issue: https://github.com/dnvriend/akka-persistence-jdbc/issues/177
    numThreads: 10
    maxConnections: 10
  }

  batchedFetches {
    # The following configs defines how many concurrent requests we'd like to run
    #   against a tezos node to speed up fetching of data
    # This values should take into account the overall load that will be generated by
    #   all fetching operations that could be generated by different Conseil
    #   instances (if more than one) and the number of requests sent by each
    #   said operations, and be compared to the load handling capabilities
    #   of the Tezos node itself

    #Used when getting accounts from tezos
    accountConcurrencyLevel: 5

    #Used when getting operation data for each new block just fetched
    blockOperationsConcurrencyLevel: 10

    #Used to paginate blocks read from tezos before each db storage
    blockPageSize: 500

    #Used to specify the max-time allowed for each block-page to finish processing
    #Currently takes into account the time to process all corresponding accounts for each page
    blockPageProcessingTimeout: 1 hour

    #Used to specify the max-time allowed for each accounts-page to finish processing
    accountPageProcessingTimeout: 15 minutes

    #Used to specify the max-time allowed for each delegate-page to finish processing
    delegatePageProcessingTimeout: 15 minutes
  }

  # Custom libSodium settings
  sodium.libraryPath: "/usr/lib/x86_64-linux-gnu/libsodium.so.18"

  blockRightsFetching {
    initDelay: 2 minutes
    interval: 60 minutes
    cyclesToFetch: 5
    cycleSize: 4096
    fetchSize: 200
  }

}

# Customization on the underlying actor system
akka {

  # custom host pool for akka-http client connections used for streaming request/responses
  # tune the configuration based on load-handling capability of tezos nodes
  # refer to host-connection-pool section in
  # https://doc.akka.io/docs/akka-http/current/configuration.html
  # for available properties and their meaning
  #
  # The current configuration is based on local benchmarking against zeronet
  # To improve or check it, look at the tech.cryptonomic.conseil.NodeStreamingBenchmark app
  # On the streaming http client pool we expect a max of:
  #   30 connections x
  #    7 requests/conn ~=
  #  210 ongoing requests at each moment
  # The pipelining on each connection might slow down for slow responses, but they should be rare
  tezos-streaming-client {
    max-connections: 30
    # The 2048 limit is thus overestimated by a factor of roughly 10x, to allow room for
    # reuse of the same pool from different threads at the same time, up to that factor
    max-open-requests: 2048
    # essentially keep connections alive across lorre's cycles
    idle-timeout: 10 minutes
    pipelining-limit: 7
    # give more room for async response in head-of-line blocking on the same connection or other slow responses
    response-entity-subscription-timeout: 5 seconds
  }

  # this is essentially available to enable composition of database operations
  # current configuration is based upon the default-blocking-io-dispatcher in akka
  tezos-dispatcher {
    type: "Dispatcher"
    executor: "thread-pool-executor"
    throughput: 1

    thread-pool-executor {
      fixed-pool-size: 16
    }
  }

  http {
    server {
      request-timeout: 5 minutes
      idle-timeout: 5 minutes
    }
  }
}